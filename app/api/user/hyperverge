<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HyperVerge KYC Document Extractor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .response-grid {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 0.5rem 1rem;
            align-items: center;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 flex items-center justify-center min-h-screen p-4">
    <div class="w-full max-w-3xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900">HyperVerge KYC API Tool</h1>
            <p class="text-lg text-gray-600 mt-2">Upload a document to extract information using the India KYC v2.0 API.</p>
        </header>

        <main id="main-content">
            <!-- Step 1: Configuration -->
            <div class="bg-white p-6 rounded-xl shadow-lg mb-6">
                <h2 class="text-2xl font-semibold mb-4 border-b pb-2 text-gray-700">1. API Configuration</h2>
                <p class="text-sm text-gray-500 mb-4">Enter your HyperVerge credentials. These are sent in the request headers.</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="appId" class="block text-sm font-medium text-gray-700">App ID</label>
                        <input type="text" id="appId" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Your HyperVerge App ID">
                    </div>
                    <div>
                        <label for="appKey" class="block text-sm font-medium text-gray-700">App Key</label>
                        <input type="password" id="appKey" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Your HyperVerge App Key">
                    </div>
                </div>
            </div>
            
            <!-- Step 2: Upload Document -->
            <div class="bg-white p-6 rounded-xl shadow-lg mb-6">
                <h2 class="text-2xl font-semibold mb-4 border-b pb-2 text-gray-700">2. Select Endpoint & Upload</h2>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="apiEndpoint" class="block text-sm font-medium text-gray-700">API Endpoint</label>
                         <select id="apiEndpoint" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            <option value="/readKYC">/readKYC (General)</option>
                            <option value="/readPAN">/readPAN</option>
                            <option value="/readAadhaar">/readAadhaar</option>
                            <option value="/readPassport">/readPassport</option>
                            <option value="/readVoterID">/readVoterID</option>
                        </select>
                    </div>
                    <div>
                        <label for="docFile" class="block text-sm font-medium text-gray-700">Document Image/PDF</label>
                        <input type="file" id="docFile" accept="image/jpeg,image/png,image/tiff,application/pdf" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/>
                    </div>
                </div>
                <div class="mt-4">
                     <img id="docPreview" class="mt-4 rounded-lg hidden max-h-60 mx-auto" alt="Document Preview" />
                </div>
            </div>

            <!-- Submit Button -->
            <div class="text-center mt-8">
                <button id="submit-extraction" class="bg-blue-600 text-white text-lg font-semibold py-3 px-12 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Extract Document Data
                </button>
            </div>
            
            <!-- Loading and Results Section -->
            <div id="results-container" class="mt-10 hidden">
                 <div class="flex justify-center items-center my-6" id="loader-container">
                    <div class="loader"></div>
                    <p class="ml-4 text-gray-600 text-lg">Extracting data from document...</p>
                </div>
                <div id="response-display" class="bg-white p-6 rounded-xl shadow-lg">
                    <!-- Results will be injected here -->
                </div>
            </div>
        </main>
    </div>

    <script>
        // --- DOM Element References ---
        const docFileInput = document.getElementById('docFile');
        const docPreview = document.getElementById('docPreview');
        const submitButton = document.getElementById('submit-extraction');
        const resultsContainer = document.getElementById('results-container');
        const loaderContainer = document.getElementById('loader-container');
        const responseDisplay = document.getElementById('response-display');

        // --- State Management ---
        let docFile = null;

        // --- Event Listeners ---
        docFileInput.addEventListener('change', (event) => {
            docFile = event.target.files[0];
            if (docFile) {
                if (docFile.type.startsWith('image/')) {
                    docPreview.src = URL.createObjectURL(docFile);
                    docPreview.classList.remove('hidden');
                } else {
                    // Don't show a preview for PDFs
                    docPreview.classList.add('hidden');
                    docPreview.src = '';
                }
            }
        });

        submitButton.addEventListener('click', handleExtraction);

        // --- Core Functions ---
        async function handleExtraction() {
            // --- Input Validation ---
            const appId = document.getElementById('appId').value;
            const appKey = document.getElementById('appKey').value;
            const endpoint = document.getElementById('apiEndpoint').value;
            
            if (!appId || !appKey) {
                alert("Please provide both App ID and App Key.");
                return;
            }
            if (!docFile) {
                alert("Please upload a document file.");
                return;
            }

            // --- UI Updates for Loading ---
            submitButton.disabled = true;
            submitButton.textContent = 'Processing...';
            resultsContainer.classList.remove('hidden');
            loaderContainer.classList.remove('hidden');
            responseDisplay.innerHTML = '';
            
            try {
                const API_BASE_URL = 'https://ind-docs.hyperverge.co/v2.0';
                const fullUrl = API_BASE_URL + endpoint;

                const formData = new FormData();
                // As per docs, use 'pdf' key for PDF, 'image' for others.
                const inputKey = docFile.type === 'application/pdf' ? 'pdf' : 'image';
                formData.append(inputKey, docFile);

                console.log(`Sending data to ${fullUrl} with input key '${inputKey}'...`);
                const responseData = await apiCall(fullUrl, formData, appId, appKey);
                displayResults(responseData);

            } catch (error) {
                console.error('Extraction failed:', error);
                // The error from apiCall is already a structured object
                displayResults(error);
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = 'Extract Document Data';
                loaderContainer.classList.add('hidden');
            }
        }

        async function apiCall(url, formData, appId, appKey) {
            const headers = new Headers();
            headers.append('appId', appId);
            headers.append('appKey', appKey);

            // NOTE: Do not set Content-Type manually.
            // The browser will automatically set it to multipart/form-data with the correct boundary when using FormData.
            const response = await fetch(url, {
                method: 'POST',
                headers: headers,
                body: formData
            });

            const responseJson = await response.json();

            if (!response.ok) {
                // Throw the parsed JSON error object for the handler to use
                throw responseJson;
            }

            return responseJson;
        }

        function displayResults(result) {
            loaderContainer.classList.add('hidden');
            let content = '';
            
            if (result.status === 'success' && result.result) {
                const resultData = result.result[0]; // API returns an array
                const docType = resultData.type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                const details = resultData.details;

                content = `<h2 class="text-2xl font-bold mb-4 text-green-600">Extraction Successful</h2>
                           <div class="bg-gray-50 p-4 rounded-lg">
                               <h3 class="font-semibold text-lg mb-3 border-b pb-2">Document Type: <span class="font-bold text-blue-600">${docType}</span></h3>
                               <div class="response-grid">
                `;

                for (const key in details) {
                    const field = details[key];
                    let valueDisplay = '';

                    // Handle nested objects like 'address' by stringifying them
                    if (typeof field.value === 'object' && field.value !== null) {
                        valueDisplay = `<pre class="text-xs bg-gray-200 p-2 rounded mt-1">${JSON.stringify(field.value, null, 2)}</pre>`;
                    } else {
                        valueDisplay = field.value || '<i class="text-gray-400">empty</i>';
                    }

                    const confidence = field.conf ? `<span class="text-xs text-white bg-blue-500 rounded-full px-2 py-0.5">${(field.conf * 100).toFixed(1)}%</span>` : '';
                    
                    content += `
                        <strong class="font-medium text-gray-600">${key.replace(/_/g, ' ')}:</strong>
                        <div>${valueDisplay}</div>
                    `;
                }

                content += `</div></div>`;

            } else { // Handle failure cases
                 content = `
                    <h2 class="text-2xl font-bold mb-4 text-red-600">Extraction Failed</h2>
                    <div class="bg-red-50 p-4 rounded-lg text-red-800">
                        <p><strong class="font-semibold">Status Code:</strong> ${result.statusCode || 'N/A'}</p>
                        <p><strong class="font-semibold">Error:</strong> ${result.error || 'An unknown error occurred.'}</p>
                    </div>
                `;
            }

            responseDisplay.innerHTML = content;
        }

    </script>
</body>
</html>
